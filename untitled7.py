# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_WjmCi8fugAF5Lyr5ulIY12bde9gDfhZ
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import svm

# prompt: read dataset in  excel format google colab in python using pandas that is already uplaoed in  session storage
!pip install -q xlrd
import pandas as pd
df = pd.read_excel('/content/Copy of loan.xlsx')
df



df.head(5)

df.info()

df.isnull().sum()

df['loanAmount_log']=np.log(df['LoanAmount'])
df['loanAmount_log'].hist(bins=20)

df.isnull().sum()

df['totalIncome']=df['ApplicantIncome']+df['CoapplicantIncome']
df['totalIncome_log']=np.log(df['totalIncome'])
df['totalIncome_log'].hist(bins=20)

df['Gender'].fillna(df['Gender'].mode()[0], inplace=True)
df['Married'].fillna(df['Married'].mode()[0], inplace=True)
df['Self_Employed'].fillna(df['Self_Employed'].mode()[0], inplace=True)
df['Dependents'].fillna(df['Dependents'].mode()[0], inplace=True)

df.LoanAmount=df.LoanAmount.fillna(df.LoanAmount.mean())
df.loanAmount_log=df.loanAmount_log.fillna(df.loanAmount_log.mean())

df['Loan_Amount_Term'].fillna(df['Loan_Amount_Term'].mode()[0], inplace=True)
df['Credit_History'].fillna(df['Credit_History'].mode()[0], inplace=True)

df.isnull().sum()

df.head()

x=df.iloc[:,np.r_[1:5,9:11,13:15]].values
y=df.iloc[:,12].values
x

print("percent of missing gender: %2f%%"%((df['Gender'].isnull().sum()/df.shape[0])*100))

print("number of peple who take loan as group by gender:")
print(df['Gender'].value_counts())
sns.countplot(x='Gender', data=df)

print("number of peple who take loan as group by Married:")
print(df['Married'].value_counts())
sns.countplot(x='Married', data=df)

print("number of peple who take loan as group by Dependents:")
print(df['Dependents'].value_counts())
sns.countplot(x='Dependents', data=df)

print("number of peple who take loan as group by Self_Employed:")
print(df['Self_Employed'].value_counts())
sns.countplot(x='Self_Employed', data=df)

print("number of peple who take loan as group by LoanAmount:")
print(df['LoanAmount'].value_counts())
sns.countplot(x='LoanAmount', data=df)

print("number of peple who take loan as group by Credit_History:")
print(df['Credit_History'].value_counts())
sns.countplot(x='Credit_History', data=df)

from sklearn.model_selection import train_test_split
X_train,X_test, y_train, y_test= train_test_split(x,y, test_size=0.2, random_state=0 )


from sklearn.preprocessing import LabelEncoder
Labelencoder_x=LabelEncoder()
print(X_train.dtype)

print(X_train[:, i].dtype)
non_numerical_values = [value for value in X_train[:, i] if not isinstance(value, (int, float))]
if non_numerical_values:
  print(f"Non-numerical values found: {non_numerical_values}")

for j, value in enumerate(X_train[:, i]):
    try:
        X_train[j, i] = float(value)
    except ValueError:
        # Handle non-numeric values
        # Option 1: Remove non-numeric characters
        try:
            X_train[j, i] = float(value.replace('+', ''))
        except ValueError:
            # Option 2: Convert to categorical data
            X_train[j, i] = str(value)

# After handling non-numeric values, you can encode the column if needed
# from sklearn.preprocessing import LabelEncoder
# label_encoder = LabelEncoder()
# X_train[:, i] = label_encoder.fit_transform(X_train[:, i])

for i in range(0,5):
  X_train[:,i]= Labelencoder_x.fit_transform(X_train[:,i])
  X_train[:,7]= Labelencoder_x.fit_transform(X_train[:,7])

X_train

Labelencoder_y= LabelEncoder()
y_train= Labelencoder_y.fit_transform(y_train)

y_train

for j, value in enumerate(X_test[:, i]):
    try:
        X_test[j, i] = float(value)
    except ValueError:
        # Handle non-numeric values
        # Option 1: Remove non-numeric characters
        try:
            X_test[j, i] = float(value.replace('+', ''))
        except ValueError:
            # Option 2: Convert to categorical data
            X_test[j, i] = str(value)

# After handling non-numeric values, you can encode the column if needed
# from sklearn.preprocessing import LabelEncoder
# label_encoder = LabelEncoder()
# X_test[:, i] = label_encoder.fit_transform(X_test[:, i])

for i in range(0,5):
  X_test[:,i]=Labelencoder_x.fit_transform(X_test[:,i])
  X_test[:,7]=Labelencoder_x.fit_transform(X_test[:,7])

X_test

Labelencoder_y= LabelEncoder()
y_test= Labelencoder_y.fit_transform(y_test)

y_test

from sklearn.preprocessing import StandardScaler

ss= StandardScaler()
X_train=ss.fit_transform(X_train)
X_test= ss.fit_transform(X_test)

from sklearn.ensemble import RandomForestClassifier
rf_clf= RandomForestClassifier()
rf_clf.fit(X_train,y_train)

from sklearn import metrics
y_pred=rf_clf.predict(X_test)

print("accuracy of rfclf is :" , metrics.accuracy_score(y_pred,y_test))

y_pred

from sklearn.naive_bayes import GaussianNB
nb_clf= GaussianNB()
nb_clf.fit(X_train,y_train)

from sklearn import metrics
y_pred=nb_clf.predict(X_test)

print("accuracy of nbclf is :" , metrics.accuracy_score(y_pred,y_test))

y_pred

from sklearn.tree import DecisionTreeClassifier
dt_clf= DecisionTreeClassifier()
dt_clf.fit(X_train,y_train)

from sklearn import metrics
y_pred=dt_clf.predict(X_test)

print("accuracy of nbclf is :" , metrics.accuracy_score(y_pred,y_test))

y_pred